// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PedalProAPI.Context;

#nullable disable

namespace PedalProAPI.Migrations
{
    [DbContext(typeof(PedalProDbContext))]
    [Migration("20230926185817_new")]
    partial class @new
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PedalProAPI.Models.Administrator", b =>
                {
                    b.Property<int>("AdministratorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AdministratorID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdministratorId"), 1L, 1);

                    b.Property<string>("AdminEmail")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AdminName")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("AdminPhoneNum")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("AdminSurname")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Title")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.HasKey("AdministratorId");

                    b.HasIndex("UserId");

                    b.ToTable("Administrator");
                });

            modelBuilder.Entity("PedalProAPI.Models.Bicycle", b =>
                {
                    b.Property<int>("BicycleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Bicycle_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BicycleId"), 1L, 1);

                    b.Property<int?>("BicycleBrandId")
                        .HasColumnType("int")
                        .HasColumnName("BicycleBrand_ID");

                    b.Property<int?>("BicycleCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("BicycleCategory_ID");

                    b.Property<string>("BicycleName")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientID");

                    b.HasKey("BicycleId");

                    b.HasIndex("BicycleBrandId");

                    b.HasIndex("BicycleCategoryId");

                    b.HasIndex("ClientId");

                    b.ToTable("Bicycle");
                });

            modelBuilder.Entity("PedalProAPI.Models.BicycleBrand", b =>
                {
                    b.Property<int>("BicycleBrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BicycleBrand_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BicycleBrandId"), 1L, 1);

                    b.Property<int>("BicycleCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("BicycleCategoryID");

                    b.Property<int?>("BrandImageId")
                        .HasColumnType("int")
                        .HasColumnName("BrandImage_ID");

                    b.Property<string>("BrandName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("BicycleBrandId");

                    b.HasIndex("BicycleCategoryId");

                    b.HasIndex("BrandImageId");

                    b.ToTable("BicycleBrand");
                });

            modelBuilder.Entity("PedalProAPI.Models.BicycleCategory", b =>
                {
                    b.Property<int>("BicycleCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BicycleCategory_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BicycleCategoryId"), 1L, 1);

                    b.Property<string>("BicycleCategoryName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("BicycleCategoryId");

                    b.ToTable("BicycleCategory");
                });

            modelBuilder.Entity("PedalProAPI.Models.BicyclePart", b =>
                {
                    b.Property<int>("BicyclePartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BicyclePart_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BicyclePartId"), 1L, 1);

                    b.Property<string>("BicyclePartName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("BicyclePartId");

                    b.ToTable("BicyclePart");
                });

            modelBuilder.Entity("PedalProAPI.Models.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Booking_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"), 1L, 1);

                    b.Property<int?>("BookingStatusId")
                        .HasColumnType("int")
                        .HasColumnName("BookingStatus_ID");

                    b.Property<int?>("BookingTypeId")
                        .HasColumnType("int")
                        .HasColumnName("BookingType_ID");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientID");

                    b.Property<string>("ReferenceNum")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("ScheduleId")
                        .HasColumnType("int")
                        .HasColumnName("Schedule_ID");

                    b.HasKey("BookingId");

                    b.HasIndex("BookingStatusId");

                    b.HasIndex("BookingTypeId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("PedalProAPI.Models.BookingRevenue", b =>
                {
                    b.Property<int>("BookingRevenueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingRevenueId"), 1L, 1);

                    b.Property<string>("BookingType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("BookingRevenueId");

                    b.ToTable("BookingRevenues");
                });

            modelBuilder.Entity("PedalProAPI.Models.BookingStatus", b =>
                {
                    b.Property<int>("BookingStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BookingStatus_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingStatusId"), 1L, 1);

                    b.Property<string>("BookingStatusName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("BookingStatusId");

                    b.ToTable("BookingStatus");

                    b.HasData(
                        new
                        {
                            BookingStatusId = 1,
                            BookingStatusName = "Attended"
                        },
                        new
                        {
                            BookingStatusId = 2,
                            BookingStatusName = "Not attended"
                        },
                        new
                        {
                            BookingStatusId = 3,
                            BookingStatusName = "Awaiting change"
                        });
                });

            modelBuilder.Entity("PedalProAPI.Models.BookingType", b =>
                {
                    b.Property<int>("BookingTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BookingType_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingTypeId"), 1L, 1);

                    b.Property<string>("BookingTypeName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<double?>("BookingTypePrice")
                        .HasColumnType("float")
                        .HasColumnName("BookingTypePrice");

                    b.HasKey("BookingTypeId");

                    b.ToTable("BookingType");

                    b.HasData(
                        new
                        {
                            BookingTypeId = 1,
                            BookingTypeName = "Training",
                            BookingTypePrice = 550.0
                        },
                        new
                        {
                            BookingTypeId = 2,
                            BookingTypeName = "Repair",
                            BookingTypePrice = 500.0
                        },
                        new
                        {
                            BookingTypeId = 3,
                            BookingTypeName = " Setup",
                            BookingTypePrice = 1000.0
                        });
                });

            modelBuilder.Entity("PedalProAPI.Models.BrandImage", b =>
                {
                    b.Property<int>("BrandImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BrandImage_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrandImageId"), 1L, 1);

                    b.Property<string>("BrandImgName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("ImageTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ImageType_ID");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("ImageURL");

                    b.HasKey("BrandImageId");

                    b.HasIndex("ImageTypeId");

                    b.ToTable("BrandImage");
                });

            modelBuilder.Entity("PedalProAPI.Models.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Cart_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"), 1L, 1);

                    b.Property<double?>("CartAmount")
                        .HasColumnType("float");

                    b.Property<int?>("CartQuantity")
                        .HasColumnType("int");

                    b.Property<int?>("CartStatusId")
                        .HasColumnType("int")
                        .HasColumnName("CartStatus_ID");

                    b.Property<int?>("PackageId")
                        .HasColumnType("int")
                        .HasColumnName("Package_ID");

                    b.HasKey("CartId");

                    b.HasIndex("CartStatusId");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("PedalProAPI.Models.CartStatus", b =>
                {
                    b.Property<int>("CartStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CartStatus_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartStatusId"), 1L, 1);

                    b.Property<string>("CartStatusName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("CartStatusId");

                    b.ToTable("CartStatus");

                    b.HasData(
                        new
                        {
                            CartStatusId = 1,
                            CartStatusName = "Empty"
                        },
                        new
                        {
                            CartStatusId = 2,
                            CartStatusName = "Full"
                        });
                });

            modelBuilder.Entity("PedalProAPI.Models.Checkout", b =>
                {
                    b.Property<int>("CheckoutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Checkout_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CheckoutId"), 1L, 1);

                    b.Property<int?>("CartId")
                        .HasColumnType("int")
                        .HasColumnName("Cart_ID");

                    b.Property<int?>("CheckoutStatusId")
                        .HasColumnType("int")
                        .HasColumnName("CheckoutStatus_ID");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("Payment_ID");

                    b.HasKey("CheckoutId");

                    b.HasIndex("CartId");

                    b.HasIndex("CheckoutStatusId");

                    b.HasIndex("PaymentId");

                    b.ToTable("Checkout");
                });

            modelBuilder.Entity("PedalProAPI.Models.CheckoutStatus", b =>
                {
                    b.Property<int>("CheckoutStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CheckoutStatus_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CheckoutStatusId"), 1L, 1);

                    b.Property<string>("CheckoutStatusName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("CheckoutStatusId");

                    b.ToTable("CheckoutStatus");
                });

            modelBuilder.Entity("PedalProAPI.Models.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientId"), 1L, 1);

                    b.Property<DateTime?>("ClientDateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("ClientEmailAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ClientName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ClientPhoneNum")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("ClientPhysicalAddress")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ClientProfilePicture")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ClientSurname")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ClientTitle")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("ClientTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ClientType_ID");

                    b.Property<bool>("IsActive")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<int?>("NumBookingsAllowance")
                        .IsUnicode(false)
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.HasKey("ClientId");

                    b.HasIndex("ClientTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("PedalProAPI.Models.ClientIndemnityForm", b =>
                {
                    b.Property<int>("ClientIndemnityFormId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IndemnityForm_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientIndemnityFormId"), 1L, 1);

                    b.Property<int?>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("Client_ID");

                    b.Property<DateTime>("DateUploaded")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("FileContent")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientIndemnityFormId");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientIndemnityForms");
                });

            modelBuilder.Entity("PedalProAPI.Models.ClientPackage", b =>
                {
                    b.Property<int>("ClientPackage1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientPackage");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientPackage1"), 1L, 1);

                    b.Property<int?>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientID");

                    b.Property<int?>("PackageId")
                        .HasColumnType("int")
                        .HasColumnName("Package_ID");

                    b.HasKey("ClientPackage1");

                    b.HasIndex("ClientId");

                    b.HasIndex("PackageId");

                    b.ToTable("ClientPackage");
                });

            modelBuilder.Entity("PedalProAPI.Models.ClientType", b =>
                {
                    b.Property<int>("ClientTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientType_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientTypeId"), 1L, 1);

                    b.Property<string>("ClientTypeName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ClientTypeId");

                    b.ToTable("ClientType");

                    b.HasData(
                        new
                        {
                            ClientTypeId = 1,
                            ClientTypeName = "Basic"
                        },
                        new
                        {
                            ClientTypeId = 2,
                            ClientTypeName = "Remote"
                        },
                        new
                        {
                            ClientTypeId = 3,
                            ClientTypeName = "Paid"
                        });
                });

            modelBuilder.Entity("PedalProAPI.Models.DatabaseTimer", b =>
                {
                    b.Property<int>("DatabaseTimerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DatabaseTimer_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DatabaseTimerId"), 1L, 1);

                    b.Property<int?>("DatabaseTimerHours")
                        .HasColumnType("int");

                    b.HasKey("DatabaseTimerId");

                    b.ToTable("DatabaseTimer");

                    b.HasData(
                        new
                        {
                            DatabaseTimerId = 1,
                            DatabaseTimerHours = 24
                        });
                });

            modelBuilder.Entity("PedalProAPI.Models.Date", b =>
                {
                    b.Property<int>("DateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Date_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DateId"), 1L, 1);

                    b.Property<DateTime?>("Date1")
                        .HasColumnType("datetime")
                        .HasColumnName("Date");

                    b.HasKey("DateId");

                    b.ToTable("Date");
                });

            modelBuilder.Entity("PedalProAPI.Models.DateSlot", b =>
                {
                    b.Property<int>("DateSlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DateSlot_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DateSlotId"), 1L, 1);

                    b.Property<int?>("DateId")
                        .HasColumnType("int")
                        .HasColumnName("Date_ID");

                    b.Property<int?>("TimeslotId")
                        .HasColumnType("int")
                        .HasColumnName("Timeslot_ID");

                    b.HasKey("DateSlotId");

                    b.HasIndex("DateId");

                    b.HasIndex("TimeslotId");

                    b.ToTable("DateSlot");
                });

            modelBuilder.Entity("PedalProAPI.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"), 1L, 1);

                    b.Property<string>("EmpEmailAddress")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("EmpName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("EmpPhoneNum")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("EmpStatusId")
                        .HasColumnType("int")
                        .HasColumnName("EmpStatus_ID");

                    b.Property<string>("EmpSurname")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("EmpTitle")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("EmpTypeId")
                        .HasColumnType("int")
                        .HasColumnName("EmpType_ID");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.HasKey("EmployeeId");

                    b.HasIndex("EmpStatusId");

                    b.HasIndex("EmpTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("PedalProAPI.Models.EmployeeStatus", b =>
                {
                    b.Property<int>("EmpStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EmpStatus_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmpStatusId"), 1L, 1);

                    b.Property<string>("EmpStatusName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("EmpStatusId");

                    b.ToTable("EmployeeStatus");

                    b.HasData(
                        new
                        {
                            EmpStatusId = 1,
                            EmpStatusName = "Available"
                        },
                        new
                        {
                            EmpStatusId = 2,
                            EmpStatusName = "Unavailable"
                        });
                });

            modelBuilder.Entity("PedalProAPI.Models.EmployeeType", b =>
                {
                    b.Property<int>("EmpTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EmpType_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmpTypeId"), 1L, 1);

                    b.Property<string>("EmpTypeDescription")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("EmpTypeName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("EmpTypeId");

                    b.ToTable("EmployeeType");
                });

            modelBuilder.Entity("PedalProAPI.Models.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Feedback_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"), 1L, 1);

                    b.Property<int?>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("Client_ID");

                    b.Property<int?>("FeedbackCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("FeedbackCategory_ID");

                    b.Property<string>("FeedbackDescription")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("FeedbackRating")
                        .HasColumnType("int");

                    b.Property<int?>("TrainingsessionId")
                        .HasColumnType("int")
                        .HasColumnName("Trainingsession_ID");

                    b.HasKey("FeedbackId");

                    b.HasIndex("ClientId");

                    b.HasIndex("FeedbackCategoryId");

                    b.HasIndex("TrainingsessionId");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("PedalProAPI.Models.FeedbackCategory", b =>
                {
                    b.Property<int>("FeedbackCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FeedbackCategory_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackCategoryId"), 1L, 1);

                    b.Property<string>("FeedbackCategoryName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("FeedbackCategoryId");

                    b.ToTable("FeedbackCategory");

                    b.HasData(
                        new
                        {
                            FeedbackCategoryId = 1,
                            FeedbackCategoryName = "Usability"
                        },
                        new
                        {
                            FeedbackCategoryId = 2,
                            FeedbackCategoryName = "Support"
                        },
                        new
                        {
                            FeedbackCategoryId = 3,
                            FeedbackCategoryName = "Service"
                        });
                });

            modelBuilder.Entity("PedalProAPI.Models.Help", b =>
                {
                    b.Property<int>("HelpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Help_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HelpId"), 1L, 1);

                    b.Property<int?>("HelpCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("HelpCategory_ID");

                    b.Property<string>("HelpDescription")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("HelpName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("HelpId");

                    b.HasIndex("HelpCategoryId");

                    b.ToTable("HELP");
                });

            modelBuilder.Entity("PedalProAPI.Models.HelpCategory", b =>
                {
                    b.Property<int>("HelpCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("HelpCategory_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HelpCategoryId"), 1L, 1);

                    b.Property<string>("HelpCategoryName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("HelpCategoryId");

                    b.ToTable("HELPCategory");

                    b.HasData(
                        new
                        {
                            HelpCategoryId = 1,
                            HelpCategoryName = "General"
                        },
                        new
                        {
                            HelpCategoryId = 2,
                            HelpCategoryName = "Account"
                        },
                        new
                        {
                            HelpCategoryId = 3,
                            HelpCategoryName = "Errors"
                        },
                        new
                        {
                            HelpCategoryId = 4,
                            HelpCategoryName = "Support"
                        });
                });

            modelBuilder.Entity("PedalProAPI.Models.ImageType", b =>
                {
                    b.Property<int>("ImageTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ImageType_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageTypeId"), 1L, 1);

                    b.Property<string>("ImageTypeName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("ImageTypeId");

                    b.ToTable("ImageType");

                    b.HasData(
                        new
                        {
                            ImageTypeId = 1,
                            ImageTypeName = "JPG"
                        },
                        new
                        {
                            ImageTypeId = 2,
                            ImageTypeName = "JPEG"
                        },
                        new
                        {
                            ImageTypeId = 3,
                            ImageTypeName = "PNG"
                        },
                        new
                        {
                            ImageTypeId = 4,
                            ImageTypeName = "WEBJ"
                        });
                });

            modelBuilder.Entity("PedalProAPI.Models.IndemnityForm", b =>
                {
                    b.Property<int>("IndemnityFormId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IndemnityForm_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IndemnityFormId"), 1L, 1);

                    b.Property<DateTime>("DateUploaded")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("FileContent")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IndemnityFormId");

                    b.ToTable("IndemnityForms");
                });

            modelBuilder.Entity("PedalProAPI.Models.Package", b =>
                {
                    b.Property<int>("PackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Package_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PackageId"), 1L, 1);

                    b.Property<int?>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("NumPackageBookings")
                        .HasColumnType("int");

                    b.Property<string>("PackageDescription")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("PackageName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("PackageId");

                    b.HasIndex("CartId");

                    b.ToTable("Package");
                });

            modelBuilder.Entity("PedalProAPI.Models.PackagePrice", b =>
                {
                    b.Property<int>("PackagePriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PackagePrice_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PackagePriceId"), 1L, 1);

                    b.Property<int?>("PackageId")
                        .HasColumnType("int")
                        .HasColumnName("Package_ID");

                    b.Property<int?>("PriceId")
                        .HasColumnType("int")
                        .HasColumnName("Price_ID");

                    b.HasKey("PackagePriceId");

                    b.HasIndex("PackageId");

                    b.HasIndex("PriceId");

                    b.ToTable("PackagePrice");
                });

            modelBuilder.Entity("PedalProAPI.Models.PackageRevenue", b =>
                {
                    b.Property<int>("PackageRevenueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PackageRevenueId"), 1L, 1);

                    b.Property<string>("PackageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("PackageRevenueId");

                    b.ToTable("PackageRevenues");
                });

            modelBuilder.Entity("PedalProAPI.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Payment_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"), 1L, 1);

                    b.Property<int?>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientID");

                    b.Property<double?>("PaymentAmount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime");

                    b.HasKey("PaymentId");

                    b.HasIndex("ClientId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("PedalProAPI.Models.PedalProUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("PedalProAPI.Models.Price", b =>
                {
                    b.Property<int>("PriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Price_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PriceId"), 1L, 1);

                    b.Property<double?>("Price1")
                        .HasColumnType("float")
                        .HasColumnName("Price");

                    b.Property<DateTime?>("PriceDate")
                        .HasColumnType("datetime");

                    b.HasKey("PriceId");

                    b.ToTable("Price");
                });

            modelBuilder.Entity("PedalProAPI.Models.Refund", b =>
                {
                    b.Property<int>("RefundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Refund_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefundId"), 1L, 1);

                    b.Property<int?>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("Booking_ID");

                    b.Property<double?>("RefundAmount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("RefundDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("RefundReasonId")
                        .HasColumnType("int")
                        .HasColumnName("RefundReason_ID");

                    b.HasKey("RefundId");

                    b.HasIndex("BookingId");

                    b.HasIndex("RefundReasonId");

                    b.ToTable("Refund");
                });

            modelBuilder.Entity("PedalProAPI.Models.RefundReason", b =>
                {
                    b.Property<int>("RefundReasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RefundReason_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefundReasonId"), 1L, 1);

                    b.Property<string>("RefundReasonDesc")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("RefundReasonId");

                    b.ToTable("RefundReason");
                });

            modelBuilder.Entity("PedalProAPI.Models.Schedule", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Schedule_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScheduleId"), 1L, 1);

                    b.Property<int?>("DateslotId")
                        .HasColumnType("int")
                        .HasColumnName("Dateslot_ID");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("Employee_ID");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("Service_ID");

                    b.Property<int?>("SetupId")
                        .HasColumnType("int")
                        .HasColumnName("Setup_ID");

                    b.Property<int?>("TrainingSessionId")
                        .HasColumnType("int")
                        .HasColumnName("TrainingSession_ID");

                    b.HasKey("ScheduleId");

                    b.HasIndex("DateslotId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("SetupId");

                    b.HasIndex("TrainingSessionId");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("PedalProAPI.Models.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Service_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"), 1L, 1);

                    b.Property<int?>("BicycleId")
                        .HasColumnType("int")
                        .HasColumnName("Bicycle_ID");

                    b.Property<int?>("BicyclePartId")
                        .HasColumnType("int")
                        .HasColumnName("BicyclePart_ID");

                    b.Property<string>("ServiceDescription")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("ServiceId");

                    b.HasIndex("BicycleId");

                    b.HasIndex("BicyclePartId");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("PedalProAPI.Models.Setup", b =>
                {
                    b.Property<int>("SetupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Setup_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SetupId"), 1L, 1);

                    b.Property<int?>("BicycleId")
                        .HasColumnType("int")
                        .HasColumnName("Bicycle_ID");

                    b.Property<string>("SetupDescription")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("SetupId");

                    b.HasIndex("BicycleId");

                    b.ToTable("Setup");
                });

            modelBuilder.Entity("PedalProAPI.Models.Timeslot", b =>
                {
                    b.Property<int>("TimeslotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Timeslot_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TimeslotId"), 1L, 1);

                    b.Property<string>("EndTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TimeslotStatusId")
                        .HasColumnType("int")
                        .HasColumnName("TimeslotStatus_ID");

                    b.Property<int?>("TrainingModuleStatusId")
                        .HasColumnType("int");

                    b.HasKey("TimeslotId");

                    b.HasIndex("TrainingModuleStatusId");

                    b.ToTable("Timeslot");
                });

            modelBuilder.Entity("PedalProAPI.Models.TimeslotStatus", b =>
                {
                    b.Property<int>("TimeslotStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TimeslotStatus_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TimeslotStatusId"), 1L, 1);

                    b.Property<string>("TimeslotStatusName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("TimeslotStatusId");

                    b.ToTable("TimeslotStatus");

                    b.HasData(
                        new
                        {
                            TimeslotStatusId = 1,
                            TimeslotStatusName = "Available"
                        },
                        new
                        {
                            TimeslotStatusId = 2,
                            TimeslotStatusName = "Booked"
                        });
                });

            modelBuilder.Entity("PedalProAPI.Models.TrainingMaterial", b =>
                {
                    b.Property<int>("TrainingMaterialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TrainingMaterial_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrainingMaterialId"), 1L, 1);

                    b.Property<string>("Content")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("TrainingMaterialName")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("TrainingModuleId")
                        .HasColumnType("int")
                        .HasColumnName("TrainingModule_ID");

                    b.Property<int?>("VideoLinkId")
                        .HasColumnType("int")
                        .HasColumnName("VideoLink_ID");

                    b.HasKey("TrainingMaterialId");

                    b.HasIndex("TrainingModuleId");

                    b.HasIndex("VideoLinkId");

                    b.ToTable("TrainingMaterial");
                });

            modelBuilder.Entity("PedalProAPI.Models.TrainingModule", b =>
                {
                    b.Property<int>("TrainingModuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TrainingModule_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrainingModuleId"), 1L, 1);

                    b.Property<string>("TrainingModuleDescription")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("TrainingModuleName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("TrainingModuleStatusId")
                        .HasColumnType("int")
                        .HasColumnName("TrainingModuleStatus_ID");

                    b.HasKey("TrainingModuleId");

                    b.HasIndex("TrainingModuleStatusId");

                    b.ToTable("TrainingModule");
                });

            modelBuilder.Entity("PedalProAPI.Models.TrainingModuleStatus", b =>
                {
                    b.Property<int>("TrainingModuleStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TrainingModuleStatus_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrainingModuleStatusId"), 1L, 1);

                    b.Property<string>("TrainingModuleStatusName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("TrainingModuleStatusId");

                    b.ToTable("TrainingModuleStatus");

                    b.HasData(
                        new
                        {
                            TrainingModuleStatusId = 1,
                            TrainingModuleStatusName = "Unstarted"
                        });
                });

            modelBuilder.Entity("PedalProAPI.Models.TrainingSession", b =>
                {
                    b.Property<int>("TrainingSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TrainingSession_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrainingSessionId"), 1L, 1);

                    b.Property<int?>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientID");

                    b.Property<string>("TrainingSessionDescription")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.HasKey("TrainingSessionId");

                    b.HasIndex("ClientId");

                    b.ToTable("TrainingSession");
                });

            modelBuilder.Entity("PedalProAPI.Models.VAT", b =>
                {
                    b.Property<int>("VatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VAT_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VatId"), 1L, 1);

                    b.Property<DateTime?>("Vatdate")
                        .HasColumnType("date")
                        .HasColumnName("VATDate");

                    b.Property<double?>("Vatpecerntage")
                        .HasColumnType("float")
                        .HasColumnName("VATPecerntage");

                    b.HasKey("VatId");

                    b.ToTable("VAT");

                    b.HasData(
                        new
                        {
                            VatId = 2,
                            Vatdate = new DateTime(2023, 9, 26, 20, 58, 17, 292, DateTimeKind.Local).AddTicks(2174),
                            Vatpecerntage = 15.0
                        });
                });

            modelBuilder.Entity("PedalProAPI.Models.VideoLink", b =>
                {
                    b.Property<int>("VideoLinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VideoLink_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VideoLinkId"), 1L, 1);

                    b.Property<int?>("VideoTypeId")
                        .HasColumnType("int")
                        .HasColumnName("VideoType_ID");

                    b.Property<string>("VideoUrl")
                        .HasMaxLength(3000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3000)")
                        .HasColumnName("VideoURL");

                    b.HasKey("VideoLinkId");

                    b.HasIndex("VideoTypeId");

                    b.ToTable("VideoLink");
                });

            modelBuilder.Entity("PedalProAPI.Models.VideoType", b =>
                {
                    b.Property<int>("VideoTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VideoType_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VideoTypeId"), 1L, 1);

                    b.Property<string>("VideoTypeName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("VideoTypeId");

                    b.ToTable("VideoType");

                    b.HasData(
                        new
                        {
                            VideoTypeId = 1,
                            VideoTypeName = "MP4"
                        },
                        new
                        {
                            VideoTypeId = 2,
                            VideoTypeName = "Mov"
                        },
                        new
                        {
                            VideoTypeId = 3,
                            VideoTypeName = "AVI"
                        });
                });

            modelBuilder.Entity("PedalProAPI.Models.Workout", b =>
                {
                    b.Property<int>("WorkoutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Workout_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkoutId"), 1L, 1);

                    b.Property<int?>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("Client_ID");

                    b.Property<double?>("Distance")
                        .HasColumnType("float");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("time");

                    b.Property<int?>("HeartRate")
                        .HasColumnType("int");

                    b.Property<DateTime?>("WorkoutDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("WorkoutTypeId")
                        .HasColumnType("int")
                        .HasColumnName("WorkoutType_ID");

                    b.HasKey("WorkoutId");

                    b.HasIndex("ClientId");

                    b.HasIndex("WorkoutTypeId");

                    b.ToTable("Workout");
                });

            modelBuilder.Entity("PedalProAPI.Models.WorkoutType", b =>
                {
                    b.Property<int>("WorkoutTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WorkoutType_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkoutTypeId"), 1L, 1);

                    b.Property<string>("WorkoutTypeName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("WorkoutTypeId");

                    b.ToTable("WorkoutType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PedalProAPI.Models.PedalProUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PedalProAPI.Models.PedalProUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PedalProAPI.Models.PedalProUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PedalProAPI.Models.PedalProUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PedalProAPI.Models.Administrator", b =>
                {
                    b.HasOne("PedalProAPI.Models.PedalProUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PedalProAPI.Models.Bicycle", b =>
                {
                    b.HasOne("PedalProAPI.Models.BicycleBrand", "BicycleBrand")
                        .WithMany()
                        .HasForeignKey("BicycleBrandId");

                    b.HasOne("PedalProAPI.Models.BicycleCategory", "BicycleCategory")
                        .WithMany()
                        .HasForeignKey("BicycleCategoryId");

                    b.HasOne("PedalProAPI.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.Navigation("BicycleBrand");

                    b.Navigation("BicycleCategory");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("PedalProAPI.Models.BicycleBrand", b =>
                {
                    b.HasOne("PedalProAPI.Models.BicycleCategory", "BicycleCategory")
                        .WithMany()
                        .HasForeignKey("BicycleCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PedalProAPI.Models.BrandImage", "BrandImage")
                        .WithMany()
                        .HasForeignKey("BrandImageId");

                    b.Navigation("BicycleCategory");

                    b.Navigation("BrandImage");
                });

            modelBuilder.Entity("PedalProAPI.Models.Booking", b =>
                {
                    b.HasOne("PedalProAPI.Models.BookingStatus", "BookingStatus")
                        .WithMany()
                        .HasForeignKey("BookingStatusId");

                    b.HasOne("PedalProAPI.Models.BookingType", "BookingType")
                        .WithMany()
                        .HasForeignKey("BookingTypeId");

                    b.HasOne("PedalProAPI.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("PedalProAPI.Models.Schedule", "Schedule")
                        .WithMany()
                        .HasForeignKey("ScheduleId");

                    b.Navigation("BookingStatus");

                    b.Navigation("BookingType");

                    b.Navigation("Client");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("PedalProAPI.Models.BrandImage", b =>
                {
                    b.HasOne("PedalProAPI.Models.ImageType", "ImageType")
                        .WithMany()
                        .HasForeignKey("ImageTypeId");

                    b.Navigation("ImageType");
                });

            modelBuilder.Entity("PedalProAPI.Models.Cart", b =>
                {
                    b.HasOne("PedalProAPI.Models.CartStatus", "CartStatus")
                        .WithMany()
                        .HasForeignKey("CartStatusId");

                    b.Navigation("CartStatus");
                });

            modelBuilder.Entity("PedalProAPI.Models.Checkout", b =>
                {
                    b.HasOne("PedalProAPI.Models.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId");

                    b.HasOne("PedalProAPI.Models.CheckoutStatus", "CheckoutStatus")
                        .WithMany()
                        .HasForeignKey("CheckoutStatusId");

                    b.HasOne("PedalProAPI.Models.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId");

                    b.Navigation("Cart");

                    b.Navigation("CheckoutStatus");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("PedalProAPI.Models.Client", b =>
                {
                    b.HasOne("PedalProAPI.Models.ClientType", "ClientType")
                        .WithMany()
                        .HasForeignKey("ClientTypeId");

                    b.HasOne("PedalProAPI.Models.PedalProUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PedalProAPI.Models.ClientIndemnityForm", b =>
                {
                    b.HasOne("PedalProAPI.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("PedalProAPI.Models.ClientPackage", b =>
                {
                    b.HasOne("PedalProAPI.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("PedalProAPI.Models.Package", "Package")
                        .WithMany()
                        .HasForeignKey("PackageId");

                    b.Navigation("Client");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("PedalProAPI.Models.DateSlot", b =>
                {
                    b.HasOne("PedalProAPI.Models.Date", "Date")
                        .WithMany()
                        .HasForeignKey("DateId");

                    b.HasOne("PedalProAPI.Models.Timeslot", "Timeslot")
                        .WithMany()
                        .HasForeignKey("TimeslotId");

                    b.Navigation("Date");

                    b.Navigation("Timeslot");
                });

            modelBuilder.Entity("PedalProAPI.Models.Employee", b =>
                {
                    b.HasOne("PedalProAPI.Models.EmployeeStatus", "EmpStatus")
                        .WithMany()
                        .HasForeignKey("EmpStatusId");

                    b.HasOne("PedalProAPI.Models.EmployeeType", "EmpType")
                        .WithMany()
                        .HasForeignKey("EmpTypeId");

                    b.HasOne("PedalProAPI.Models.PedalProUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmpStatus");

                    b.Navigation("EmpType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PedalProAPI.Models.Feedback", b =>
                {
                    b.HasOne("PedalProAPI.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("PedalProAPI.Models.FeedbackCategory", "FeedbackCategory")
                        .WithMany()
                        .HasForeignKey("FeedbackCategoryId");

                    b.HasOne("PedalProAPI.Models.TrainingSession", "Trainingsession")
                        .WithMany()
                        .HasForeignKey("TrainingsessionId");

                    b.Navigation("Client");

                    b.Navigation("FeedbackCategory");

                    b.Navigation("Trainingsession");
                });

            modelBuilder.Entity("PedalProAPI.Models.Help", b =>
                {
                    b.HasOne("PedalProAPI.Models.HelpCategory", "HelpCategory")
                        .WithMany()
                        .HasForeignKey("HelpCategoryId");

                    b.Navigation("HelpCategory");
                });

            modelBuilder.Entity("PedalProAPI.Models.Package", b =>
                {
                    b.HasOne("PedalProAPI.Models.Cart", null)
                        .WithMany("Packages")
                        .HasForeignKey("CartId");
                });

            modelBuilder.Entity("PedalProAPI.Models.PackagePrice", b =>
                {
                    b.HasOne("PedalProAPI.Models.Package", "Package")
                        .WithMany()
                        .HasForeignKey("PackageId");

                    b.HasOne("PedalProAPI.Models.Price", "Price")
                        .WithMany()
                        .HasForeignKey("PriceId");

                    b.Navigation("Package");

                    b.Navigation("Price");
                });

            modelBuilder.Entity("PedalProAPI.Models.Payment", b =>
                {
                    b.HasOne("PedalProAPI.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("PedalProAPI.Models.Refund", b =>
                {
                    b.HasOne("PedalProAPI.Models.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId");

                    b.HasOne("PedalProAPI.Models.RefundReason", "RefundReason")
                        .WithMany()
                        .HasForeignKey("RefundReasonId");

                    b.Navigation("Booking");

                    b.Navigation("RefundReason");
                });

            modelBuilder.Entity("PedalProAPI.Models.Schedule", b =>
                {
                    b.HasOne("PedalProAPI.Models.DateSlot", "Dateslot")
                        .WithMany()
                        .HasForeignKey("DateslotId");

                    b.HasOne("PedalProAPI.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("PedalProAPI.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId");

                    b.HasOne("PedalProAPI.Models.Setup", "Setup")
                        .WithMany()
                        .HasForeignKey("SetupId");

                    b.HasOne("PedalProAPI.Models.TrainingSession", "TrainingSession")
                        .WithMany()
                        .HasForeignKey("TrainingSessionId");

                    b.Navigation("Dateslot");

                    b.Navigation("Employee");

                    b.Navigation("Service");

                    b.Navigation("Setup");

                    b.Navigation("TrainingSession");
                });

            modelBuilder.Entity("PedalProAPI.Models.Service", b =>
                {
                    b.HasOne("PedalProAPI.Models.Bicycle", "Bicycle")
                        .WithMany()
                        .HasForeignKey("BicycleId");

                    b.HasOne("PedalProAPI.Models.BicyclePart", "BicyclePart")
                        .WithMany()
                        .HasForeignKey("BicyclePartId");

                    b.Navigation("Bicycle");

                    b.Navigation("BicyclePart");
                });

            modelBuilder.Entity("PedalProAPI.Models.Setup", b =>
                {
                    b.HasOne("PedalProAPI.Models.Bicycle", "Bicycle")
                        .WithMany()
                        .HasForeignKey("BicycleId");

                    b.Navigation("Bicycle");
                });

            modelBuilder.Entity("PedalProAPI.Models.Timeslot", b =>
                {
                    b.HasOne("PedalProAPI.Models.TimeslotStatus", "TimeslotStatus")
                        .WithMany()
                        .HasForeignKey("TrainingModuleStatusId");

                    b.Navigation("TimeslotStatus");
                });

            modelBuilder.Entity("PedalProAPI.Models.TrainingMaterial", b =>
                {
                    b.HasOne("PedalProAPI.Models.TrainingModule", "TrainingModule")
                        .WithMany()
                        .HasForeignKey("TrainingModuleId");

                    b.HasOne("PedalProAPI.Models.VideoLink", "VideoLink")
                        .WithMany()
                        .HasForeignKey("VideoLinkId");

                    b.Navigation("TrainingModule");

                    b.Navigation("VideoLink");
                });

            modelBuilder.Entity("PedalProAPI.Models.TrainingModule", b =>
                {
                    b.HasOne("PedalProAPI.Models.TrainingModuleStatus", "TrainingModuleStatus")
                        .WithMany()
                        .HasForeignKey("TrainingModuleStatusId");

                    b.Navigation("TrainingModuleStatus");
                });

            modelBuilder.Entity("PedalProAPI.Models.TrainingSession", b =>
                {
                    b.HasOne("PedalProAPI.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("PedalProAPI.Models.VideoLink", b =>
                {
                    b.HasOne("PedalProAPI.Models.VideoType", "VideoType")
                        .WithMany()
                        .HasForeignKey("VideoTypeId");

                    b.Navigation("VideoType");
                });

            modelBuilder.Entity("PedalProAPI.Models.Workout", b =>
                {
                    b.HasOne("PedalProAPI.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("PedalProAPI.Models.WorkoutType", "WorkoutType")
                        .WithMany()
                        .HasForeignKey("WorkoutTypeId");

                    b.Navigation("Client");

                    b.Navigation("WorkoutType");
                });

            modelBuilder.Entity("PedalProAPI.Models.Cart", b =>
                {
                    b.Navigation("Packages");
                });
#pragma warning restore 612, 618
        }
    }
}
